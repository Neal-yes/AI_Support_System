name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start API stack (docker-compose) and wait for health
        env:
          API_PORT: "8000"
        run: |
          set -euo pipefail
          echo "[CI] Preparing .env from configs/env.example"
          cp configs/env.example .env
          # Ensure API port is 8000 for local exposure
          sed -i 's/^API_PORT=.*/API_PORT=8000/' .env || true

          echo "[CI] Docker/Compose versions"
          docker --version
          docker compose version || true

          echo "[CI] Pull lightweight dependencies in background (best-effort)"
          docker compose pull db redis qdrant ollama || true

          echo "[CI] Build API image"
          docker compose build api

          echo "[CI] Bring up dependencies first"
          docker compose up -d db redis qdrant ollama

          echo "[CI] Bring up API"
          docker compose up -d api

          echo "[CI] Wait for API health on http://localhost:${API_PORT}/metrics"
          ok=0
          for i in $(seq 1 60); do
            if curl -fsS "http://localhost:${API_PORT}/metrics" >/dev/null 2>&1; then
              echo "[CI] API healthy (metrics reachable)"
              ok=1; break
            fi
            sleep 2
          done
          if [ "$ok" != "1" ]; then
            echo "[CI] API did not become healthy in time; showing logs for debugging" >&2
            docker compose ps
            docker compose logs --no-color --timestamps api || true
            exit 1
          fi

      - name: Run tests
        run: pytest -q

      - name: Smoke ask (plain + RAG)
        run: |
          bash scripts/smoke_ask.sh

      - name: RAG evaluation gate
        env:
          # M1 基线阈值（技术计划 2.10，门禁仅包含已实现的指标）
          GATE_HIT_RATIO_MIN: "0.60"
          GATE_AVG_TOP1_MIN: "0.35"
          GATE_STRICT: "both"
          GATE_MIN_TOTAL: "10"
          GATE_REQUIRE_MIN_TOTAL: "0"
          RAG_EVAL_QUERIES: queries/rag_eval_50.jsonl
          RAG_TOP_K: "5"
        run: |
          bash scripts/rag_eval_gate.sh

      - name: CI Summary (RAG & Smoke)
        if: always()
        run: |
          echo "## RAG Gate Summary" >> "$GITHUB_STEP_SUMMARY"
          if [ -f artifacts/metrics/rag_eval.json ]; then
            HR=$(jq -r '.summary.hit_ratio // 0' artifacts/metrics/rag_eval.json)
            AT1=$(jq -r '.summary.avg_top1 // 0' artifacts/metrics/rag_eval.json)
            TOT=$(jq -r '.summary.total // 0' artifacts/metrics/rag_eval.json)
            echo "- total: ${TOT}" >> "$GITHUB_STEP_SUMMARY"
            echo "- hit_ratio: ${HR}" >> "$GITHUB_STEP_SUMMARY"
            echo "- avg_top1: ${AT1}" >> "$GITHUB_STEP_SUMMARY"
            if [ -f artifacts/metrics/rag_eval.csv ]; then
              echo "- csv: artifacts/metrics/rag_eval.csv (in artifacts)" >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "- rag_eval.json not found" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "\n## Smoke Ask" >> "$GITHUB_STEP_SUMMARY"
          P_STATUS=$(cat artifacts/metrics/ask_plain.status 2>/dev/null || echo "missing")
          R_STATUS=$(cat artifacts/metrics/ask_rag.status 2>/dev/null || echo "missing")
          echo "- plain: ${P_STATUS}" >> "$GITHUB_STEP_SUMMARY"
          echo "- rag: ${R_STATUS}" >> "$GITHUB_STEP_SUMMARY"

      - name: Upload metrics artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: metrics-and-reports
          path: |
            artifacts/metrics/*
          if-no-files-found: ignore

