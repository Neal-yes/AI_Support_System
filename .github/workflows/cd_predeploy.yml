name: CD Pre-Deploy Checks

on:
  workflow_dispatch:
    inputs:
      gate_hit_ratio_min:
        description: "Override GATE_HIT_RATIO_MIN (e.g., 0.70)"
        required: false
        type: string
      gate_avg_top1_min:
        description: "Override GATE_AVG_TOP1_MIN (e.g., 0.40)"
        required: false
        type: string
  push:
    branches:
      - 'release/*'
    tags:
      - 'v*.*.*'

permissions:
  contents: read

jobs:
  predeploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set model name (small, stable)
        run: |
          MODEL_VAL="${MODEL_SMALL:-qwen2:0.5b}"
          echo "MODEL_SMALL=${MODEL_VAL}" >> "$GITHUB_ENV"
          {
            echo "## CI Model Selection";
            echo;
            echo "- MODEL_SMALL: ${MODEL_VAL}";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Docker compose availability
        run: docker compose version

      - name: Prepare .env for Compose
        run: |
          if [ -f configs/env.example ]; then
            cp -f configs/env.example .env
            echo "Prepared .env from configs/env.example"
          elif [ -f .env ]; then
            echo ".env already present"
          else
            {
              echo "COMPOSE_PROJECT_NAME=ai_support";
              echo "GRAFANA_ADMIN_USER=admin";
              echo "GRAFANA_ADMIN_PASSWORD=admin";
            } > .env
          fi

      - name: Start minimal stack (api, redis, qdrant, ollama, prometheus)
        run: |
          docker compose -f docker-compose.yml pull || true
          docker compose -f docker-compose.yml up -d api redis qdrant ollama prometheus

      - name: Wait for services
        run: |
          echo "Waiting for API (http://localhost:8000/metrics)"
          for i in {1..40}; do curl -fsS http://localhost:8000/metrics && break || sleep 5; done
          echo "Waiting for Ollama (http://localhost:11434)"
          for i in {1..40}; do curl -fsS http://localhost:11434/api/tags && break || sleep 5; done
          echo "Waiting for Prometheus (http://localhost:9090/-/ready)"
          for i in {1..40}; do curl -fsS http://localhost:9090/-/ready && break || sleep 5; done

      - name: Wait API readiness (/-/ready)
        run: |
          set -euo pipefail
          url="http://localhost:8000/-/ready"
          echo "Waiting for $url ..."
          for i in $(seq 1 60); do
            code=$(curl -sS -o /tmp/ready.json -w "%{http_code}" "$url" || true)
            if [ "$code" = "200" ] && jq -e '.status == "ok" or .status == "degraded"' /tmp/ready.json >/dev/null 2>&1; then
              echo "API ready ($code)"; break
            fi
            sleep 2
          done

      - name: Pull small Ollama model (compose exec)
        run: |
          set -e
          echo "Pulling model via docker compose: ${MODEL_SMALL}"
          for i in {1..5}; do
            if docker compose exec -T ollama ollama pull "${MODEL_SMALL}"; then break; fi
            echo "pull attempt $i failed; retrying in 10s"; sleep 10
          done

      - name: Install CLI deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Seed demo embeddings
        env:
          API_BASE: http://localhost:8000
          OUT_DIR: artifacts/metrics
          MAX_DOCS: "300"
          RAG_COLLECTION: default_collection
          RAG_MODEL: ${{ env.MODEL_SMALL }}
        run: |
          set -euxo pipefail
          bash scripts/ci/prepare_demo_embeddings.sh
          echo "Embedding seed finished"

      - name: Assert embedding seeded (>0)
        run: |
          set -euo pipefail
          f="artifacts/metrics/embedding_upsert.json"
          if [ ! -f "$f" ]; then echo "Missing $f" >&2; exit 1; fi
          total=$(jq -r '.total // 0' "$f")
          echo "embedding_upsert total=$total"
          awk -v t="$total" 'BEGIN{ if (t+0 <= 0) { print "No embeddings upserted" > "/dev/stderr"; exit 1 } }'

      - name: Smoke Ask (plain & rag)
        env:
          MODEL: ${{ env.MODEL_SMALL }}
          SMOKE_VERBOSE: "1"
        run: |
          bash "$GITHUB_WORKSPACE/scripts/ci/smoke_ask.sh"

      - name: Assert Smoke PASS
        run: |
          set -euo pipefail
          if [ -f artifacts/metrics/smoke_summary.md ]; then
            if ! grep -qE '^- result: PASS$' artifacts/metrics/smoke_summary.md; then
              echo "Smoke summary indicates failure:" >&2
              sed -n '1,200p' artifacts/metrics/smoke_summary.md >&2 || true
              exit 1
            fi
          else
            echo "smoke_summary.md missing" >&2
            exit 1
          fi

      - name: Set RAG gate thresholds (pre-deploy; overridable)
        run: |
          set -euo pipefail
          set_var() {
            local key="$1"; local val="$2"; echo "$key=$val" >> "$GITHUB_ENV"; }
          # defaults (slightly conservative); allow workflow_dispatch override
          set_var GATE_HIT_RATIO_MIN "${{ inputs.gate_hit_ratio_min || '0.60' }}"
          set_var GATE_AVG_TOP1_MIN "${{ inputs.gate_avg_top1_min || '0.35' }}"
          echo "GATE_STRICT=either" >> "$GITHUB_ENV"
          echo "Gate thresholds: hit_ratio>=$GATE_HIT_RATIO_MIN, avg_top1>=$GATE_AVG_TOP1_MIN"

      - name: Select RAG eval queries (align with seeded corpus)
        run: |
          set -euo pipefail
          q1="artifacts/metrics/demo_faq.autogen.jsonl"
          q2="demo_faq.jsonl"
          sel=""
          if [ -f "$q1" ]; then sel="$q1"; elif [ -f "$q2" ]; then sel="$q2"; fi
          echo "RAG_EVAL_QUERIES=${sel}" >> "$GITHUB_ENV"
          echo "Using RAG_EVAL_QUERIES=${sel:-<built-in>}"

      - name: RAG eval gate (pre-deploy)
        env:
          RAG_EVAL_QUERIES: ${{ env.RAG_EVAL_QUERIES }}
          RAG_TOP_K: "5"
          RAG_MODEL: ${{ env.MODEL_SMALL }}
          RAG_COLLECTION: default_collection
          GATE_HIT_RATIO_MIN: ${{ env.GATE_HIT_RATIO_MIN }}
          GATE_AVG_TOP1_MIN: ${{ env.GATE_AVG_TOP1_MIN }}
          GATE_STRICT: ${{ env.GATE_STRICT }}
        run: |
          bash "$GITHUB_WORKSPACE/scripts/ci/rag_eval_gate.sh"

      - name: Print RAG eval summary to logs
        if: always()
        run: |
          set -euo pipefail
          f="artifacts/metrics/rag_eval.json"
          if [ -f "$f" ]; then
            echo "RAG EVAL SUMMARY (from JSON):"
            jq -r '.summary' "$f" || true
          else
            echo "rag_eval.json not found" >&2
          fi

      - name: Collect artifacts & probes
        if: always()
        continue-on-error: true
        run: |
          mkdir -p artifacts/metrics
          curl -fsS http://localhost:8000/metrics -o artifacts/metrics/metrics_snapshot.prom || true
          ls -la artifacts/metrics || true

      - name: Append Job Summary
        if: always()
        continue-on-error: true
        run: |
          echo "# Pre-Deploy Checks" >> "$GITHUB_STEP_SUMMARY"
          if [ -f artifacts/metrics/smoke_summary.md ]; then
            echo >> "$GITHUB_STEP_SUMMARY"; sed -n '1,200p' artifacts/metrics/smoke_summary.md >> "$GITHUB_STEP_SUMMARY"; echo >> "$GITHUB_STEP_SUMMARY";
          fi
          if [ -f artifacts/metrics/rag_gate_summary.md ]; then
            echo >> "$GITHUB_STEP_SUMMARY"; sed -n '1,200p' artifacts/metrics/rag_gate_summary.md >> "$GITHUB_STEP_SUMMARY"; echo >> "$GITHUB_STEP_SUMMARY";
          fi

      - name: Upload pre-deploy artifacts
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: cd-predeploy-artifacts-${{ github.run_id }}-1
          path: |
            artifacts/metrics/*

      - name: Teardown
        if: always()
        continue-on-error: true
        run: |
          docker compose -f docker-compose.yml down -v || true
